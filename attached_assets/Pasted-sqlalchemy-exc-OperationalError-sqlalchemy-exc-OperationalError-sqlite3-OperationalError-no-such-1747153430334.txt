sqlalchemy.exc.OperationalError
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: user.active_status
[SQL: SELECT user.id AS user_id, user.email AS user_email, user.password_hash AS user_password_hash, user.first_name AS user_first_name, user.last_name AS user_last_name, user.is_admin AS user_is_admin, user.active_status AS user_active_status, user.created_at AS user_created_at, user.last_login AS user_last_login, user.login_count AS user_login_count 
FROM user 
WHERE user.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)

Traceback (most recent call last)
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
self.dialect.do_execute(
^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 945, in do_execute
cursor.execute(statement, parameters)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The above exception was the direct cause of the following exception:
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1536, in __call__
return self.wsgi_app(environ, start_response)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\werkzeug\middleware\proxy_fix.py", line 183, in __call__
return self.app(environ, start_response)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1514, in wsgi_app
response = self.handle_exception(e)
           ^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 1511, in wsgi_app
response = self.full_dispatch_request()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 919, in full_dispatch_request
rv = self.handle_user_exception(e)
     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 917, in full_dispatch_request
rv = self.dispatch_request()
     ^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask\app.py", line 902, in dispatch_request
return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\Desktop\netonechurnpre-main\routes.py", line 24, in index
if current_user.is_authenticated:
   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\werkzeug\local.py", line 318, in __get__
obj = instance._get_current_object()
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\werkzeug\local.py", line 526, in _get_current_object
return get_name(local())
                ^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_login\utils.py", line 25, in <lambda>
current_user = LocalProxy(lambda: _get_user())
                                  ^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_login\utils.py", line 370, in _get_user
current_app.login_manager._load_user()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\flask_login\login_manager.py", line 364, in _load_user
user = self._user_callback(user_id)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\Desktop\netonechurnpre-main\app.py", line 61, in load_user
return User.query.get(int(user_id))
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "<string>", line 2, in get
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\util\deprecations.py", line 386, in warned
return fn(*args, **kwargs)  # type: ignore[no-any-return]
       ^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py", line 1126, in get
return self._get_impl(ident, loading.load_on_pk_identity)
       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\query.py", line 1135, in _get_impl
return self.session._get_impl(
       
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 3874, in _get_impl
return db_load_fn(
       
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\loading.py", line 694, in load_on_pk_identity
session.execute(
^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2365, in execute
return self._execute_internal(
       
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\session.py", line 2251, in _execute_internal
result: Result[Any] = compile_state_cls.orm_execute_statement(
                      
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\orm\context.py", line 306, in orm_execute_statement
result = conn.execute(
         
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1416, in execute
return meth(
       
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\sql\elements.py", line 523, in _execute_on_connection
return connection._execute_clauseelement(
       
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1638, in _execute_clauseelement
ret = self._execute_context(
      
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1843, in _execute_context
return self._exec_single_context(
       
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1983, in _exec_single_context
self._handle_dbapi_exception(
^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 2352, in _handle_dbapi_exception
raise sqlalchemy_exception.with_traceback(exc_info[2]) from e
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\base.py", line 1964, in _exec_single_context
self.dialect.do_execute(
^
File "c:\Users\ASHMORE TATENDA M\AppData\Local\Programs\Python\Python313\Lib\site-packages\sqlalchemy\engine\default.py", line 945, in do_execute
cursor.execute(statement, parameters)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: user.active_status
[SQL: SELECT user.id AS user_id, user.email AS user_email, user.password_hash AS user_password_hash, user.first_name AS user_first_name, user.last_name AS user_last_name, user.is_admin AS user_is_admin, user.active_status AS user_active_status, user.created_at AS user_created_at, user.last_login AS user_last_login, user.login_count AS user_login_count
FROM user
WHERE user.id = ?]
[parameters: (1,)]
(Background on this error at: https://sqlalche.me/e/20/e3q8)
The debugger caught an exception in your WSGI application. You can now look at the traceback which led to the error.
To switch between the interactive traceback and the plaintext one, you can click on the "Traceback" headline. From the text traceback you can also create a paste of it. For code execution mouse-over the frame you want to debug and click on the console icon on the right side.

You can execute arbitrary Python code in the stack frames and there are some extra helpers available for introspection:

dump() shows all variables in the frame
dump(obj) dumps all that's known about the object
